"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6755],{9057:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>o,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=l(4848),t=l(8453);const r={sidebar_position:3},d="Handlers",i={id:"fundamentals/handlers",title:"Handlers",description:"Handlers are functions that are called when an event is triggered. Handlers are registered with the calling add_handler funciton of app or using decorators.",source:"@site/docs/fundamentals/handlers.md",sourceDirName:"fundamentals",slug:"/fundamentals/handlers",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/handlers",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Events",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/events"},next:{title:"Decorator Handlers",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/decorators"}},s={},c=[{value:"Handler functions",id:"handler-functions",level:2},{value:"Creating handlers",id:"creating-handlers",level:2},{value:"Registering handlers",id:"registering-handlers",level:2},{value:"Chat handlers",id:"chat-handlers",level:2},{value:"Message Handler",id:"message-handler",level:3},{value:"Properties",id:"properties",level:4},{value:"Example",id:"example",level:4},{value:"Command Handler",id:"command-handler",level:3},{value:"Properties",id:"properties-1",level:4},{value:"Example",id:"example-1",level:4},{value:"Callback Query Handler",id:"callback-query-handler",level:3},{value:"Properties",id:"properties-2",level:4},{value:"Example",id:"example-2",level:4},{value:"Inline Query Handler",id:"inline-query-handler",level:3},{value:"Properties",id:"properties-3",level:4},{value:"Example",id:"example-3",level:4},{value:"Community handlers",id:"community-handlers",level:2},{value:"Community Updated Handler",id:"community-updated-handler",level:3},{value:"Properties",id:"properties-4",level:4},{value:"Example",id:"example-4",level:4},{value:"Member Joined Handler",id:"member-joined-handler",level:3},{value:"Properties",id:"properties-5",level:4},{value:"Example",id:"example-5",level:4},{value:"Member Left Handler",id:"member-left-handler",level:3},{value:"Properties",id:"properties-6",level:4},{value:"Example",id:"example-6",level:4},{value:"Channel Updated Handler",id:"channel-updated-handler",level:3},{value:"Properties",id:"properties-7",level:4},{value:"Example",id:"example-7",level:4},{value:"Channel Created Handler",id:"channel-created-handler",level:3},{value:"Properties",id:"properties-8",level:4},{value:"Example",id:"example-8",level:4},{value:"Channel Deleted Handler",id:"channel-deleted-handler",level:3},{value:"Properties",id:"properties-9",level:4},{value:"Example",id:"example-9",level:4},{value:"Group Updated Handler",id:"group-updated-handler",level:3},{value:"Properties",id:"properties-10",level:4},{value:"Example",id:"example-10",level:4},{value:"Group Created Handler",id:"group-created-handler",level:3},{value:"Properites",id:"properites",level:4},{value:"Example",id:"example-11",level:4},{value:"Group Deleted Handler",id:"group-deleted-handler",level:3},{value:"Properties",id:"properties-11",level:4},{value:"Example",id:"example-12",level:4},{value:"User Banned Handler",id:"user-banned-handler",level:3},{value:"Properties",id:"properties-12",level:4},{value:"Example",id:"example-13",level:4}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"handlers",children:"Handlers"})}),"\n",(0,a.jsxs)(n.p,{children:["Handlers are functions that are called when an event is triggered. Handlers are registered with the calling ",(0,a.jsx)(n.code,{children:"add_handler"})," funciton of app or using ",(0,a.jsx)(n.a,{href:"./decorators",children:(0,a.jsx)(n.code,{children:"decorators"})}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"handler-functions",children:"Handler functions"}),"\n",(0,a.jsxs)(n.p,{children:["Handler functions are functions that are called when an event is triggered. They are registered with the ",(0,a.jsx)(n.code,{children:"add_handler"})," function of the app.\nThe function must accept a single argument, which is the ",(0,a.jsx)(n.a,{href:"./context",children:(0,a.jsx)(n.code,{children:"BotContext"})})," containig the info of the bot and the event."]}),"\n",(0,a.jsxs)(n.p,{children:["There are one handler class for each event type. The handler class name is the same as the event class, but with the ",(0,a.jsx)(n.code,{children:"Handler"})," suffix."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-handlers",children:"Creating handlers"}),"\n",(0,a.jsxs)(n.p,{children:["All handlers can be created calling the constructor of the handler class. The constructor accepts two arguments: the handler function, and a ",(0,a.jsx)(n.a,{href:"./filters",children:"filter"})," or a group of filters."]}),"\n",(0,a.jsx)(n.p,{children:"Each handler receives function (the first argument of the Handler) receives a BotContext[T] (where T is one of the EventTypes) as an argument. The BotContext contains the bot and the event that triggered the handler."}),"\n",(0,a.jsxs)(n.p,{children:["To define a handler callback function you must use the ",(0,a.jsx)(n.code,{children:"async def"})," syntax, and the function must accept a single argument, which is the BotContext[T] of the event."]}),"\n",(0,a.jsx)(n.p,{children:"This is an example of how to create a handler function for each type of event:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from swibots import Client, BotContext, MessageEvent, CommandEvent, CommandHandler, MessageHandler\n\napp = Client("token", "your bot description")\n\nasync def message_handler(ctx: BotContext[MessageEvent]):\n    await ctx.event.message.reply_text(f"Thank you! I received your message: {ctx.event.message.message}")\n\napp.add_handler(MessageHandler(message_handler))\n\nasync def command_handler(ctx: BotContext[CommandEvent]):\n    await ctx.event.message.reply_text(f"Thank you! I received your command: {ctx.event.command}")\n\napp.add_handler(CommandHandler(\'THE_COMMAND\', command_handler))\n\napp.run()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"registering-handlers",children:"Registering handlers"}),"\n",(0,a.jsxs)(n.p,{children:["Handlers are registered with the ",(0,a.jsx)(n.code,{children:"add_handler"})," function of the app. The function accepts a single argument, which is the handler function."]}),"\n",(0,a.jsx)(n.p,{children:"This is an example of how to register a handler function:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from swibots import Client, MessageHandler\n\napp = Client("token", "your bot description")\n\nasync def message_handler(ctx: BotContext[MessageEvent]):\n    await ctx.event.message.reply_text(f"Thank you! I received your message: {ctx.event.message.message}")\n\napp.add_handler(MessageHandler(message_handler))\n\napp.run()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"chat-handlers",children:"Chat handlers"}),"\n",(0,a.jsx)(n.h3,{id:"message-handler",children:"Message Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"MessageHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"MessageEvent"}),". It is called when a message is sent to a chat."]}),"\n",(0,a.jsx)(n.h4,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[MessageEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from swibots import Client, MessageHandler, MessageEvent, BotContext\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def message_handler(context: BotContext[MessageEvent]):\n    message = context.event.message\n    await message.reply_text(\"Hello world!\")\n\n# register handler\napp.add_handler(MessageHandler(message_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"command-handler",children:"Command Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"CommandHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"CommandEvent"}),". It is called when a command is sent to a chat."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-1",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"command"})," (",(0,a.jsx)(n.code,{children:"str"})," | ",(0,a.jsx)(n.code,{children:"List[str]"}),"): The command that will be used to filter the event. If a list is passed, the handler will be called if any of the commands is found."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[CommandEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from swibots import Client, CommandHandler, CommandEvent, BotContext\n\n# create app and call it app\napp = Client(\'TOKEN\')\n\n# handler callback function\nasync def command_handler(context: BotContext[CommandEvent]):\n    message = context.event.message\n    await message.reply_text("Hello world!")\n\n# register handler\napp.add_handler(CommandHandler("hello", command_handler))\n'})}),"\n",(0,a.jsx)(n.h3,{id:"callback-query-handler",children:"Callback Query Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"CallbackQueryHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"CallbackQueryEvent"}),". It is called when a callback query is sent to a chat (the user pressed a button of the reply markup for example)."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-2",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[CallbackQueryEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, CallbackQueryHandler, CallbackQueryEvent, BotContext\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def callback_query_handler(context: BotContext[CallbackQueryEvent]):\n    message = context.event.message\n    await message.reply_text(\"Hello world!\")\n\n# register handler\napp.add_handler(CallbackQueryHandler(callback_query_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"inline-query-handler",children:"Inline Query Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"InlineQueryHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"InlineQueryEvent"}),". It is called when an inline query is sent to a chat."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-3",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[InlineQueryEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, InlineQueryHandler, InlineQueryEvent, InlineQuery, BotContext\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def inline_query_handler(context: BotContext[InlineQueryEvent]):\n    query: InlineQuery = ctx.event.query\n    await query.answer(f\"Searching results for {query.query}...\")\n    # ... search results and send them\n\n# register handler\napp.add_handler(InlineQueryHandler(inline_query_handler))\n"})}),"\n",(0,a.jsx)(n.h2,{id:"community-handlers",children:"Community handlers"}),"\n",(0,a.jsx)(n.h3,{id:"community-updated-handler",children:"Community Updated Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"CommunityUpdatedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"CommunityUpdatedEvent"}),". It is called when a community is updated."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-4",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[CommunityUpdatedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, CommunityUpdatedHandler, CommunityUpdatedEvent, BotContext, Community\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def community_updated_handler(context: BotContext[CommunityUpdatedEvent]):\n    community: Community = ctx.event.community\n    # ... do something with the community\n\n# register handler\napp.add_handler(CommunityUpdatedHandler(community_updated_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"member-joined-handler",children:"Member Joined Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"MemberJoinedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"MemberJoinedEvent"}),". It is called when a member joins a community."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-5",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[MemberJoinedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, MemberJoinedHandler, MemberJoinedEvent, BotContext, User\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def member_joined_handler(context: BotContext[MemberJoinedEvent]):\n    member: User = ctx.event.user # the user that joined the community\n    # ... do something with the member\n\n# register handler\napp.add_handler(MemberJoinedHandler(member_joined_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"member-left-handler",children:"Member Left Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"MemberLeftHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"MemberLeftEvent"}),". It is called when a member leaves a community."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-6",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[MemberLeftEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, MemberLeftHandler, MemberLeftEvent, BotContext, User\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def member_left_handler(context: BotContext[MemberLeftEvent]):\n    member: User = ctx.event.user # the user that left the community\n    # ... do something with the member\n\n# register handler\napp.add_handler(MemberLeftHandler(member_left_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"channel-updated-handler",children:"Channel Updated Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ChannelUpdatedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"ChannelUpdatedEvent"}),". It is called when a channel is updated."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-7",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[ChannelUpdatedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, ChannelUpdatedHandler, ChannelUpdatedEvent, BotContext, Channel\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def channel_updated_handler(context: BotContext[ChannelUpdatedEvent]):\n    channel: Channel = ctx.event.channel\n    # ... do something with the channel\n\n# register handler\napp.add_handler(ChannelUpdatedHandler(channel_updated_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"channel-created-handler",children:"Channel Created Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ChannelCreatedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"ChannelCreatedEvent"}),". It is called when a channel is created."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-8",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[ChannelCreatedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, ChannelCreatedHandler, ChannelCreatedEvent, BotContext, Channel\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def channel_created_handler(context: BotContext[ChannelCreatedEvent]):\n    channel: Channel = ctx.event.channel\n    # ... do something with the channel\n\n# register handler\napp.add_handler(ChannelCreatedHandler(channel_created_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"channel-deleted-handler",children:"Channel Deleted Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"ChannelDeletedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"ChannelDeletedEvent"}),". It is called when a channel is deleted."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-9",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[ChannelDeletedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, ChannelDeletedHandler, ChannelDeletedEvent, BotContext, Channel\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def channel_deleted_handler(context: BotContext[ChannelDeletedEvent]):\n    channel: Channel = ctx.event.channel\n    # ... do something with the channel\n\n# register handler\napp.add_handler(ChannelDeletedHandler(channel_deleted_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"group-updated-handler",children:"Group Updated Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"GroupUpdatedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"GroupUpdatedEvent"}),". It is called when a group is updated."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-10",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[GroupUpdatedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, GroupUpdatedHandler, GroupUpdatedEvent, BotContext, Group\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def group_updated_handler(context: BotContext[GroupUpdatedEvent]):\n    group: Group = ctx.event.group\n    # ... do something with the group\n\n# register handler\napp.add_handler(GroupUpdatedHandler(group_updated_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"group-created-handler",children:"Group Created Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"GroupCreatedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"GroupCreatedEvent"}),". It is called when a group is created."]}),"\n",(0,a.jsx)(n.h4,{id:"properites",children:"Properites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[GroupCreatedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-11",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, GroupCreatedHandler, GroupCreatedEvent, BotContext, Group\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def group_created_handler(context: BotContext[GroupCreatedEvent]):\n    group: Group = ctx.event.group\n    # ... do something with the group\n\n# register handler\n\napp.add_handler(GroupCreatedHandler(group_created_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"group-deleted-handler",children:"Group Deleted Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"GroupDeletedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"GroupDeletedEvent"}),". It is called when a group is deleted."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-11",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[GroupDeletedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-12",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, GroupDeletedHandler, GroupDeletedEvent, BotContext, Group\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def group_deleted_handler(context: BotContext[GroupDeletedEvent]):\n    group: Group = ctx.event.group\n    # ... do something with the group\n\n# register handler\napp.add_handler(GroupDeletedHandler(group_deleted_handler))\n"})}),"\n",(0,a.jsx)(n.h3,{id:"user-banned-handler",children:"User Banned Handler"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"UserBannedHandler"})," is a handler for the ",(0,a.jsx)(n.code,{children:"UserBannedEvent"}),". It is called when a user is banned from a group."]}),"\n",(0,a.jsx)(n.h4,{id:"properties-12",children:"Properties"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"callback"})," (",(0,a.jsx)(n.code,{children:"Callable[[BotContext[UserBannedEvent]], Awaitable]"}),"): The callback function that will be called when the event is triggered."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"filter"})," (",(0,a.jsx)(n.code,{children:"Filter"}),", optional): The filter that will be used to filter the event. (Default: ",(0,a.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"example-13",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"\nfrom swibots import Client, UserBannedHandler, UserBannedEvent, BotContext, User, Group\n\n# create app and call it app\napp = Client('TOKEN')\n\n# handler callback function\nasync def user_banned_handler(context: BotContext[UserBannedEvent]):\n    user: User = ctx.event.user\n    group: Group = ctx.event.group # or ctx.event.channel if the user was banned from a channel\n    # ... do something with the user and the group \n\n# register handler\napp.add_handler(UserBannedHandler(user_banned_handler))\n"})})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>d,x:()=>i});var a=l(6540);const t={},r=a.createContext(t);function d(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);