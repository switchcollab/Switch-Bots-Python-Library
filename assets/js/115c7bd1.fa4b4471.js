"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7143],{4714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"examples/mini-app-bot","title":"Mini App Bot Example","description":"This example demonstrates how to create a bot that launches a mini app using SwiBots. The mini app showcases various UI components and interactions.","source":"@site/docs/examples/mini-app-bot.md","sourceDirName":"examples","slug":"/examples/mini-app-bot","permalink":"/Switch-Bots-Python-Library/docs/examples/mini-app-bot","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Creating Your First Bot: Echo Bot","permalink":"/Switch-Bots-Python-Library/docs/examples/echo-bot"},"next":{"title":"Poll Bot Example","permalink":"/Switch-Bots-Python-Library/docs/examples/poll-bot"}}');var i=t(4848),o=t(8453);const l={},r="Mini App Bot Example",c={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step-by-Step Tutorial",id:"step-by-step-tutorial",level:2},{value:"Step 1: Set up the bot",id:"step-1-set-up-the-bot",level:3},{value:"Step 2: Create the start command",id:"step-2-create-the-start-command",level:3},{value:"Step 3: Design the main app page",id:"step-3-design-the-main-app-page",level:3},{value:"Step 4: Add a video player page",id:"step-4-add-a-video-player-page",level:3},{value:"Step 5: Add a grid view page",id:"step-5-add-a-grid-view-page",level:3},{value:"Step 6: Handle user interactions",id:"step-6-handle-user-interactions",level:3},{value:"Step 7: Run the bot",id:"step-7-run-the-bot",level:3},{value:"Running the Bot",id:"running-the-bot",level:2},{value:"Using the Bot",id:"using-the-bot",level:2},{value:"Features Demonstrated",id:"features-demonstrated",level:2},{value:"Note",id:"note",level:2}];function s(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mini-app-bot-example",children:"Mini App Bot Example"})}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates how to create a bot that launches a mini app using SwiBots. The mini app showcases various UI components and interactions."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"Before you begin, make sure you have:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Installed SwiBots (",(0,i.jsx)(n.code,{children:"pip install swibots"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Obtained a bot token from the Switch platform"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-by-step-tutorial",children:"Step-by-Step Tutorial"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-set-up-the-bot",children:"Step 1: Set up the bot"}),"\n",(0,i.jsx)(n.p,{children:"First, let's import the necessary modules and set up the basic structure of our bot:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import logging\nfrom swibots import (\n    Client, BotContext, CommandEvent, CallbackQueryEvent, BotCommand,\n    AppPage, Text, Button, ButtonGroup, Image, VideoPlayer, Grid, GridItem,\n    SearchBar, Dropdown, ListItem, ScreenType, TextSize,\n    InlineKeyboardButton, InlineMarkup\n)\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nTOKEN = "YOUR_BOT_TOKEN_HERE"\n\napp = Client(TOKEN, is_app=True, home_callback="open_app")\napp.set_bot_commands([BotCommand("start", "Open the mini app", True)])\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-create-the-start-command",children:"Step 2: Create the start command"}),"\n",(0,i.jsxs)(n.p,{children:["Now, let's create a handler for the ",(0,i.jsx)(n.code,{children:"/start"})," command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.on_command("start")\nasync def start_command(ctx: BotContext[CommandEvent]):\n    await ctx.event.message.reply_text(\n        "Welcome to the Mini App Example! Click the button below to open the app.",\n        inline_markup=InlineMarkup([[\n            InlineKeyboardButton("Open Mini App", callback_data="open_app", app=True)\n        ]])\n    )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-design-the-main-app-page",children:"Step 3: Design the main app page"}),"\n",(0,i.jsx)(n.p,{children:"Create a function to handle the main app page:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.on_callback_query(regexp("open_app"))\nasync def open_app(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Welcome to the Mini App Example!", size=TextSize.LARGE),\n            Image("https://example.com/sample-image.jpg", callback_data="image_clicked"),\n            ButtonGroup([\n                Button("Show Video", callback_data="show_video"),\n                Button("Show Grid", callback_data="show_grid"),\n            ]),\n            SearchBar(callback_data="search"),\n            Dropdown(\n                "Select an option",\n                options=[\n                    ListItem("Option 1", callback_data="option_1"),\n                    ListItem("Option 2", callback_data="option_2"),\n                    ListItem("Option 3", callback_data="option_3"),\n                ]\n            ),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-4-add-a-video-player-page",children:"Step 4: Add a video player page"}),"\n",(0,i.jsx)(n.p,{children:"Create a function to display a video player:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.on_callback_query(regexp("show_video"))\nasync def show_video(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Video Player Example", size=TextSize.MEDIUM),\n            VideoPlayer("https://example.com/sample-video.mp4", title="Sample Video"),\n            Button("Back to Home", callback_data="open_app"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-5-add-a-grid-view-page",children:"Step 5: Add a grid view page"}),"\n",(0,i.jsx)(n.p,{children:"Create a function to display a grid of items:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.on_callback_query(regexp("show_grid"))\nasync def show_grid(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Grid Example", size=TextSize.MEDIUM),\n            Grid(\n                title="Sample Grid",\n                options=[\n                    GridItem("Item 1", "https://example.com/icon1.png", callback_data="grid_item_1"),\n                    GridItem("Item 2", "https://example.com/icon2.png", callback_data="grid_item_2"),\n                    GridItem("Item 3", "https://example.com/icon3.png", callback_data="grid_item_3"),\n                    GridItem("Item 4", "https://example.com/icon4.png", callback_data="grid_item_4"),\n                ]\n            ),\n            Button("Back to Home", callback_data="open_app"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-6-handle-user-interactions",children:"Step 6: Handle user interactions"}),"\n",(0,i.jsx)(n.p,{children:"Add functions to handle various user interactions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'@app.on_callback_query(regexp("search"))\nasync def handle_search(ctx: BotContext[CallbackQueryEvent]):\n    query = ctx.event.details.get("searchQuery")\n    if query:\n        await ctx.event.answer(f"You searched for: {query}", show_alert=True)\n    else:\n        await ctx.event.answer("Please enter a search query", show_alert=True)\n\n@app.on_callback_query(regexp("option_"))\nasync def handle_dropdown(ctx: BotContext[CallbackQueryEvent]):\n    option = ctx.event.callback_data.split("_")[1]\n    await ctx.event.answer(f"You selected Option {option}", show_alert=True)\n\n@app.on_callback_query(regexp("grid_item_"))\nasync def handle_grid_item(ctx: BotContext[CallbackQueryEvent]):\n    item = ctx.event.callback_data.split("_")[-1]\n    await ctx.event.answer(f"You clicked Grid Item {item}", show_alert=True)\n\n@app.on_callback_query(regexp("image_clicked"))\nasync def handle_image_click(ctx: BotContext[CallbackQueryEvent]):\n    await ctx.event.answer("You clicked the image!", show_alert=True)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-7-run-the-bot",children:"Step 7: Run the bot"}),"\n",(0,i.jsx)(n.p,{children:"Finally, add the code to run the bot:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    app.run()\n'})}),"\n",(0,i.jsx)(n.h2,{id:"running-the-bot",children:"Running the Bot"}),"\n",(0,i.jsxs)(n.p,{children:["To run the bot, save the complete code in a file (e.g., ",(0,i.jsx)(n.code,{children:"mini_app_bot.py"}),") and execute it:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python mini_app_bot.py\n"})}),"\n",(0,i.jsx)(n.h2,{id:"using-the-bot",children:"Using the Bot"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Start a conversation with your bot and send the ",(0,i.jsx)(n.code,{children:"/start"})," command."]}),"\n",(0,i.jsx)(n.li,{children:'Click the "Open Mini App" button to launch the mini app.'}),"\n",(0,i.jsxs)(n.li,{children:["Interact with various components in the mini app:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Click on the image to trigger an alert."}),"\n",(0,i.jsx)(n.li,{children:'Use the "Show Video" and "Show Grid" buttons to navigate to different screens.'}),"\n",(0,i.jsx)(n.li,{children:"Try the search bar by entering a query."}),"\n",(0,i.jsx)(n.li,{children:"Select an option from the dropdown menu."}),"\n",(0,i.jsx)(n.li,{children:"Click on grid items in the grid view."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"features-demonstrated",children:"Features Demonstrated"}),"\n",(0,i.jsx)(n.p,{children:"This example showcases the following SwiBots features:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Creating a mini app with various UI components:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Text"}),"\n",(0,i.jsx)(n.li,{children:"Image"}),"\n",(0,i.jsx)(n.li,{children:"Buttons and ButtonGroups"}),"\n",(0,i.jsx)(n.li,{children:"Video Player"}),"\n",(0,i.jsx)(n.li,{children:"Grid and GridItems"}),"\n",(0,i.jsx)(n.li,{children:"Search Bar"}),"\n",(0,i.jsx)(n.li,{children:"Dropdown menu"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Handling user interactions with different components."}),"\n",(0,i.jsx)(n.li,{children:"Navigating between different screens within the mini app."}),"\n",(0,i.jsx)(n.li,{children:"Using callbacks to update the app's content dynamically."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"note",children:"Note"}),"\n",(0,i.jsx)(n.p,{children:"This is a basic implementation to demonstrate the capabilities of SwiBots mini apps. For a production-ready bot, consider adding error handling, input validation, and more advanced features tailored to your specific use case."}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Complete Code"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import logging\nfrom swibots import (\n    Client, BotContext, CommandEvent, CallbackQueryEvent, BotCommand,\n    AppPage, Text, Button, ButtonGroup, Image, VideoPlayer, Grid, GridItem,\n    SearchBar, Dropdown, ListItem, ScreenType, TextSize,\n    InlineKeyboardButton, InlineMarkup, regexp\n)\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nTOKEN = "YOUR_BOT_TOKEN_HERE"\n\napp = Client(TOKEN, is_app=True, home_callback="open_app")\napp.set_bot_commands([BotCommand("start", "Open the mini app", True)])\n\n@app.on_command("start")\nasync def start_command(ctx: BotContext[CommandEvent]):\n    await ctx.event.message.reply_text(\n        "Welcome to the Mini App Example! Click the button below to open the app.",\n        inline_markup=InlineMarkup([[\n            InlineKeyboardButton("Open Mini App", callback_data="open_app", app=True)\n        ]])\n    )\n\n@app.on_callback_query(regexp("open_app"))\nasync def open_app(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Welcome to the Mini App Example!", size=TextSize.LARGE),\n            Image("https://example.com/sample-image.jpg", callback_data="image_clicked"),\n            ButtonGroup([\n                Button("Show Video", callback_data="show_video"),\n                Button("Show Grid", callback_data="show_grid"),\n            ]),\n            SearchBar(callback_data="search"),\n            Dropdown(\n                "Select an option",\n                options=[\n                    ListItem("Option 1", callback_data="option_1"),\n                    ListItem("Option 2", callback_data="option_2"),\n                    ListItem("Option 3", callback_data="option_3"),\n                ]\n            ),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("show_video"))\nasync def show_video(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Video Player Example", size=TextSize.MEDIUM),\n            VideoPlayer("https://example.com/sample-video.mp4", title="Sample Video"),\n            Button("Back to Home", callback_data="open_app"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("show_grid"))\nasync def show_grid(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Grid Example", size=TextSize.MEDIUM),\n            Grid(\n                title="Sample Grid",\n                options=[\n                    GridItem("Item 1", "https://example.com/icon1.png", callback_data="grid_item_1"),\n                    GridItem("Item 2", "https://example.com/icon2.png", callback_data="grid_item_2"),\n                    GridItem("Item 3", "https://example.com/icon3.png", callback_data="grid_item_3"),\n                    GridItem("Item 4", "https://example.com/icon4.png", callback_data="grid_item_4"),\n                ]\n            ),\n            Button("Back to Home", callback_data="open_app"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("search"))\nasync def handle_search(ctx: BotContext[CallbackQueryEvent]):\n    query = ctx.event.details.get("searchQuery")\n    if query:\n        await ctx.event.answer(f"You searched for: {query}", show_alert=True)\n    else:\n        await ctx.event.answer("Please enter a search query", show_alert=True)\n\n@app.on_callback_query(regexp("option_"))\nasync def handle_dropdown(ctx: BotContext[CallbackQueryEvent]):\n    option = ctx.event.callback_data.split("_")[1]\n    await ctx.event.answer(f"You selected Option {option}", show_alert=True)\n\n@app.on_callback_query(regexp("grid_item_"))\nasync def handle_grid_item(ctx: BotContext[CallbackQueryEvent]):\n    item = ctx.event.callback_data.split("_")[-1]\n    await ctx.event.answer(f"You clicked Grid Item {item}", show_alert=True)\n\n@app.on_callback_query(regexp("image_clicked"))\nasync def handle_image_click(ctx: BotContext[CallbackQueryEvent]):\n    await ctx.event.answer("You clicked the image!", show_alert=True)\n\nif __name__ == "__main__":\n    app.run()\n'})})]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function l(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);