"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1230],{5774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"examples/calculator-bot","title":"Calculator Bot Example","description":"This example demonstrates a more complex use case of a mini app using SwiBots. The bot creates an advanced calculator with basic arithmetic, scientific functions, and calculation history.","source":"@site/docs/examples/calculator-bot.md","sourceDirName":"examples","slug":"/examples/calculator-bot","permalink":"/Switch-Bots-Python-Library/docs/examples/calculator-bot","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Example","permalink":"/Switch-Bots-Python-Library/docs/category/example"},"next":{"title":"Creating Your First Bot: Echo Bot","permalink":"/Switch-Bots-Python-Library/docs/examples/echo-bot"}}');var r=t(4848),o=t(8453);const i={},s="Calculator Bot Example",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"The Code",id:"the-code",level:2},{value:"Features Demonstrated",id:"features-demonstrated",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Running the Bot",id:"running-the-bot",level:2},{value:"Note",id:"note",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"calculator-bot-example",children:"Calculator Bot Example"})}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates a more complex use case of a mini app using SwiBots. The bot creates an advanced calculator with basic arithmetic, scientific functions, and calculation history."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before you begin, make sure you have:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Installed SwiBots (",(0,r.jsx)(n.code,{children:"pip install swibots"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Obtained a bot token from the Switch platform"}),"\n",(0,r.jsxs)(n.li,{children:["Installed the ",(0,r.jsx)(n.code,{children:"math"})," module (usually comes pre-installed with Python)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"the-code",children:"The Code"}),"\n",(0,r.jsx)(n.p,{children:"Here's the complete code for our advanced calculator bot:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import logging\nimport math\nfrom swibots import (\n    Client, BotContext, CommandEvent, CallbackQueryEvent, BotCommand,\n    AppPage, Text, Button, ButtonGroup,\n    ScreenType, TextSize, InlineKeyboardButton, InlineMarkup, regexp\n)\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nTOKEN = "YOUR_BOT_TOKEN_HERE"\n\napp = Client(TOKEN, is_app=True, home_callback="show_calculator")\napp.set_bot_commands([BotCommand("start", "Open the calculator", True)])\n\n# Store calculation history\nuser_history = {}\n\ndef evaluate_expression(expression):\n    try:\n        # Replace \'^\' with \'**\' for exponentiation\n        expression = expression.replace(\'^\', \'**\')\n        # Add math. prefix to mathematical functions\n        for func in [\'sin\', \'cos\', \'tan\', \'log\', \'sqrt\']:\n            expression = expression.replace(func, f\'math.{func}\')\n        return str(eval(expression, {"__builtins__": None}, {"math": math}))\n    except Exception as e:\n        return f"Error: {str(e)}"\n\n@app.on_command("start")\nasync def start_command(ctx: BotContext[CommandEvent]):\n    await ctx.event.message.reply_text(\n        "Welcome to the Advanced Calculator! Click the button below to start calculating.",\n        inline_markup=InlineMarkup([[\n            InlineKeyboardButton("Open Calculator", callback_data="show_calculator", app=True)\n        ]])\n    )\n\n@app.on_callback_query(regexp("show_calculator"))\nasync def show_calculator(ctx: BotContext[CallbackQueryEvent]):\n    user_id = ctx.event.action_by_id\n    current_expression = user_history.get(user_id, {}).get(\'current\', \'\')\n    \n    calculator_buttons = [\n        ["7", "8", "9", "/"],\n        ["4", "5", "6", "*"],\n        ["1", "2", "3", "-"],\n        ["0", ".", "=", "+"],\n        ["(", ")", "C", "\u2190"],\n        ["sin", "cos", "tan", "^"],\n        ["log", "sqrt", "\u03c0", "e"],\n    ]\n    \n    button_groups = [\n        ButtonGroup([Button(btn, callback_data=f"calc_{btn}") for btn in row])\n        for row in calculator_buttons\n    ]\n    \n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Advanced Calculator", size=TextSize.LARGE),\n            Text(current_expression or "0", size=TextSize.MEDIUM),\n            *button_groups,\n            Button("View History", callback_data="view_history"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("calc_"))\nasync def handle_calculation(ctx: BotContext[CallbackQueryEvent]):\n    user_id = ctx.event.action_by_id\n    button = ctx.event.callback_data.split("_")[1]\n    \n    if user_id not in user_history:\n        user_history[user_id] = {\'current\': \'\', \'history\': []}\n    \n    current = user_history[user_id][\'current\']\n    \n    if button == "=":\n        result = evaluate_expression(current)\n        user_history[user_id][\'history\'].append(f"{current} = {result}")\n        user_history[user_id][\'current\'] = result\n    elif button == "C":\n        user_history[user_id][\'current\'] = \'\'\n    elif button == "\u2190":\n        user_history[user_id][\'current\'] = current[:-1]\n    elif button == "\u03c0":\n        user_history[user_id][\'current\'] += str(math.pi)\n    elif button == "e":\n        user_history[user_id][\'current\'] += str(math.e)\n    else:\n        user_history[user_id][\'current\'] += button\n    \n    await show_calculator(ctx)\n\n@app.on_callback_query(regexp("view_history"))\nasync def view_history(ctx: BotContext[CallbackQueryEvent]):\n    user_id = ctx.event.action_by_id\n    history = user_history.get(user_id, {}).get(\'history\', [])\n    \n    if not history:\n        await ctx.event.answer("No calculation history available.", show_alert=True)\n        return\n    \n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Calculation History", size=TextSize.LARGE),\n            Text("\\n".join(history[-10:]), size=TextSize.MEDIUM),\n            Button("Back to Calculator", callback_data="show_calculator"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\nif __name__ == "__main__":\n    app.run()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"features-demonstrated",children:"Features Demonstrated"}),"\n",(0,r.jsx)(n.p,{children:"This example showcases the following SwiBots features:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Creating a complex mini app with advanced functionality"}),"\n",(0,r.jsxs)(n.li,{children:["Using various UI components:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Text"}),"\n",(0,r.jsx)(n.li,{children:"Buttons and ButtonGroups"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Implementing a calculator interface with multiple operations"}),"\n",(0,r.jsx)(n.li,{children:"Maintaining user state (current expression and calculation history)"}),"\n",(0,r.jsx)(n.li,{children:"Handling user actions for various calculator functions"}),"\n",(0,r.jsxs)(n.li,{children:["Integrating with Python's ",(0,r.jsx)(n.code,{children:"math"})," module for advanced calculations"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The bot starts with a welcome message and a button to open the calculator."}),"\n",(0,r.jsx)(n.li,{children:"The main calculator screen shows the current expression and buttons for various operations."}),"\n",(0,r.jsx)(n.li,{children:"Users can input numbers and perform various operations, including basic arithmetic and scientific functions."}),"\n",(0,r.jsx)(n.li,{children:"The calculator evaluates expressions and displays results."}),"\n",(0,r.jsx)(n.li,{children:"Users can view their calculation history."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates how to create a more complex, interactive mini app that provides practical functionality while showcasing various SwiBots features."}),"\n",(0,r.jsx)(n.h2,{id:"running-the-bot",children:"Running the Bot"}),"\n",(0,r.jsxs)(n.p,{children:["To run the bot, save the complete code in a file (e.g., ",(0,r.jsx)(n.code,{children:"advanced_calculator_bot.py"}),") and execute it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python advanced_calculator_bot.py\n"})}),"\n",(0,r.jsx)(n.h2,{id:"note",children:"Note"}),"\n",(0,r.jsxs)(n.p,{children:["This implementation uses Python's ",(0,r.jsx)(n.code,{children:"eval()"})," function, which can be dangerous if used with untrusted input. In a production environment, you should implement a safer method of evaluating mathematical expressions, such as using a parsing library or implementing your own expression evaluator."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(6540);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);