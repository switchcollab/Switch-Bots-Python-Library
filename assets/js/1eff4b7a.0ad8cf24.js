"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2239],{8050:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var s=r(4848),i=r(8453);const t={},o="InlineQuery",l={id:"api_reference/types/inline/inline_query",title:"InlineQuery",description:"Class swibots.api.chat.models.inline.InlineQuery",source:"@site/docs/api_reference/types/inline/inline_query.md",sourceDirName:"api_reference/types/inline",slug:"/api_reference/types/inline/inline_query",permalink:"/Switch-Bots-Python-Library/docs/api_reference/types/inline/inline_query",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Inline Types",permalink:"/Switch-Bots-Python-Library/docs/category/inline-types"},next:{title:"InlineQueryAnswer",permalink:"/Switch-Bots-Python-Library/docs/api_reference/types/inline/inline_query_answer"}},c={},a=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"inlinequery",children:"InlineQuery"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"Class swibots.api.chat.models.inline.InlineQuery"})}),"\n",(0,s.jsx)(n.p,{children:"The InlineQuery object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results."}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"id"})," (",(0,s.jsx)(n.code,{children:"str"}),"): Unique identifier for this query"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user_id"})," (",(0,s.jsx)(n.code,{children:"int"}),"): The ID of the user who sent the query"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"user"})," (",(0,s.jsx)(n.a,{href:"../user",children:"User"}),"): The user who sent the query"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"community_id"})," (",(0,s.jsx)(n.code,{children:"int"}),"): The ID of the community where the query was sent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"community"})," (",(0,s.jsx)(n.a,{href:"../community",children:"Community"}),"): The community where the query was sent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"group_id"})," (",(0,s.jsx)(n.code,{children:"int"}),"): The ID of the group where the query was sent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"group"})," (",(0,s.jsx)(n.a,{href:"../group",children:"Group"}),"): The group where the query was sent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"channel_id"})," (",(0,s.jsx)(n.code,{children:"int"}),"): The ID of the channel where the query was sent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"channel"})," (",(0,s.jsx)(n.a,{href:"../channel",children:"Channel"}),"): The channel where the query was sent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"query_id"})," (",(0,s.jsx)(n.code,{children:"str"}),"): Unique identifier for this query"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"offset"})," (",(0,s.jsx)(n.code,{children:"str"}),"): Offset of the results to be returned, can be controlled by the bot"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"query"})," (",(0,s.jsx)(n.code,{children:"str"}),"): Text of the query (up to 256 characters)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:(0,s.jsxs)(n.strong,{children:["answer(response: ",(0,s.jsx)(n.a,{href:"./inline_query_answer",children:"InlineQueryAnswer"}),"]) -> bool:"]})}),"\nUse this method to send answers to an inline query. On success, True is returned.\nNo more than 50 results per query are allowed."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import logging\nimport json\nfrom typing import Tuple\nfrom swibots import (Client, BotContext, MessageEvent, Message, InlineQuery,  \n                     InlineQueryEvent, RestClient, RestResponse, JSONDict,\n                     NetworkError, InlineQueryResultArticle,\n                     InputMessageContent)\n\nlogging.basicConfig(level=logging.DEBUG)\n\nlog = logging.getLogger(__name__)\n\nrestclient = RestClient()\n\n\ndef parse_response(response: Tuple[int, bytes]) -> RestResponse[JSONDict]:\n  decoded_s = response[1].decode("utf-8", "replace")\n  try:\n    jsonObject = json.loads(decoded_s)\n  except ValueError as exc:\n    jsonObject = decoded_s\n\n  response = RestResponse(jsonObject, response[0], {})\n  if response.is_error:\n    raise NetworkError(response.error_message)\n  return response\n\n\nTOKEN = "your_token"\n\napp = Client(TOKEN, "This is an inline query bot")\n\n@app.on_message()\nasync def on_message(ctx: BotContext[MessageEvent]):\n  message: Message = ctx.event.message\n  log.info(f"Message: {message.message}")\n  await message.reply_text(f"Echo: {message.message}")\n\n\n@app.on_inline_query()\nasync def on_inline_query(ctx: BotContext[InlineQueryEvent]):\n  query: InlineQuery = ctx.event.query\n  log.info(f"Inline query: {query.query}")\n  await query.answer(f"Searching results for {query.query}...")\n  url = f"https://en.wikipedia.org/w/api.php?action=opensearch&format=json&search={query.query}&limit=50"\n  response = parse_response(await restclient.get(url))\n  if response.status_code == 200:\n    data = response.data\n    results = []\n    for i in range(len(data[1])):\n      results.append(\n        InlineQueryResultArticle(\n          id=str(i),\n          title=data[1][i],\n          description=data[1][i],\n          input_message=InputMessageContent(data[2][i]),\n          article_url=data[3][i],\n          thumb_url=\n          "https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Wikipedia-logo-v2.svg/1200px-Wikipedia-logo-v2.svg.png",\n          thumb_width=48,\n          thumb_height=48))\n    await query.answer(results)\n  else:\n    await query.answer("There was an error while searching for results.")\n\n\napp.run()\n\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);