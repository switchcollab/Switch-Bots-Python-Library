"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1222],{4887:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=t(5893),a=t(1151);const s={sidebar_position:1},i="Commands",r={id:"interactions/commands",title:"Commands",description:"Commands are the primary way of interacting with a bot.",source:"@site/docs/interactions/commands.md",sourceDirName:"interactions",slug:"/interactions/commands",permalink:"/Switch-Bots-Python-Library/docs/interactions/commands",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Interactions",permalink:"/Switch-Bots-Python-Library/docs/category/interactions"},next:{title:"Keyboards",permalink:"/Switch-Bots-Python-Library/docs/interactions/keyboards"}},c={},d=[{value:"Registering commands",id:"registering-commands",level:2},{value:"Handling commands",id:"handling-commands",level:2}];function m(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"commands",children:"Commands"}),"\n",(0,o.jsx)(e.p,{children:"Commands are the primary way of interacting with a bot."}),"\n",(0,o.jsxs)(e.p,{children:["They are short messages that start with a ",(0,o.jsx)(e.code,{children:"/"})," followed by [",(0,o.jsx)(e.code,{children:"1 to 32"}),"] characters with no spaces, and are sent to the bot in the chat. The bot will then receive the command and act accordingly."]}),"\n",(0,o.jsxs)(e.p,{children:["Commands have also parameters, which are separated by spaces. For example, the command ",(0,o.jsx)(e.code,{children:"/command param1 param2"})," has two parameters: ",(0,o.jsx)(e.code,{children:"param1"})," and ",(0,o.jsx)(e.code,{children:"param2"}),"."]}),"\n",(0,o.jsx)(e.h2,{id:"registering-commands",children:"Registering commands"}),"\n",(0,o.jsx)(e.admonition,{type:"info",children:(0,o.jsxs)(e.p,{children:["Commands must be registered into the bot creating an instance of ",(0,o.jsx)(e.code,{children:"RegisterCommand"})," class and passing it to the ",(0,o.jsx)(e.code,{children:"add_command"})," method of the ",(0,o.jsx)(e.code,{children:"Client"})," class."]})}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"BotCommand"})," class takes 2 parameters:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"command:str"}),": The command"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"description:str"}),": The command description (a short descriptive string of what the command does)."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"channel:bool"}),": Whether the command can be used in a channel or not. Defaults to ",(0,o.jsx)(e.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from swibots import Client, BotCommand\n\nTOKEN= "YOUR_TOKEN"\n\napp = Client(\n    TOKEN,\n    "A cool bot with annotations and everything you could possibly want :)"\n)\n\napp.set_bot_commands([\n    BotCommand("test", "Test command", True),\n    BotCommand("echo", "Echoes the message", True),\n    BotCommand("buttons", "Shows buttons", True),\n])\n\napp.run()\n'})}),"\n",(0,o.jsx)(e.admonition,{type:"warning",children:(0,o.jsxs)(e.p,{children:["All the commands must be registered before the bot is started.\nThe server will not send a ",(0,o.jsx)(e.code,{children:"Command"})," event to the bot if the command is not registered."]})}),"\n",(0,o.jsx)(e.h2,{id:"handling-commands",children:"Handling commands"}),"\n",(0,o.jsxs)(e.p,{children:["As has been explained on ",(0,o.jsx)(e.a,{href:"/docs/fundamentals/handlers",children:"the handlers page"}),", the bot will receive a ",(0,o.jsx)(e.code,{children:"CommandEvent"})," when a command is sent to it.\nTo handle the command, you must create a handler function and register it using the ",(0,o.jsx)(e.code,{children:"on_command"})," decorator or calling ",(0,o.jsx)(e.code,{children:"add_hanlder"})," method of your bot app."]}),"\n",(0,o.jsxs)(e.p,{children:["The handler function must accept a ",(0,o.jsx)(e.code,{children:"BotContext[CommandEvent]"})," as its only argument."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from swibots import Client, BotCommand, BotContext, CommandEvent\n\nTOKEN = "YOUR_TOKEN"\n\napp = Client(\n    TOKEN,\n    "A cool bot with annotations and everything you could possibly want :)"\n)\n\n@app.on_command("echo")\nasync def echo_handler(ctx: BotContext[CommandEvent]):\n    m = await ctx.prepare_response_message(ctx.event.message)\n    # Get the text to echo from the command parameters\n    text = ctx.event.params or "Nothing to echo"\n    m.message = f"Your message: {text}"\n    await ctx.send_message(m)\n\napp.set_bot_commands([\n    BotCommand("echo", "Echoes the message", True),\n])\n\napp.run()\n\n'})})]})}function h(n={}){const{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>i});var o=t(7294);const a={},s=o.createContext(a);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);