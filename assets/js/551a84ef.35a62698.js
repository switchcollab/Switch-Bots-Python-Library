"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1695],{2177:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=t(5893),i=t(1151);const a={sidebar_position:2},o="Calling the API methods",c={id:"basic-concepts/calling-api",title:"Calling the API methods",description:"After your project is set up, you can start creating your app",source:"@site/docs/basic-concepts/calling-api.md",sourceDirName:"basic-concepts",slug:"/basic-concepts/calling-api",permalink:"/Switch-Bots-Python-Library/docs/basic-concepts/calling-api",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Project setup",permalink:"/Switch-Bots-Python-Library/docs/basic-concepts/project-setup"},next:{title:"Handling events",permalink:"/Switch-Bots-Python-Library/docs/basic-concepts/events"}},r={},l=[{value:"Basic usage",id:"basic-usage",level:2},{value:"Step by step",id:"step-by-step",level:2},{value:"Context Manager",id:"context-manager",level:2},{value:"Using asyncio.run()",id:"using-asynciorun",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"calling-the-api-methods",children:"Calling the API methods"}),"\n",(0,s.jsxs)(e.p,{children:["After your ",(0,s.jsx)(e.a,{href:"./project-setup",children:"project is set up"}),", you can start creating your app\nand calling the API methods"]}),"\n",(0,s.jsx)(e.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,s.jsx)(e.p,{children:"Making API calls with SwiBots is very simple. Here\u2019s a basic example we are going to examine step by step:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from swibots import Client\n\napp = Client("TOKEN")\n\nasync def main():\n    async with app:\n        me = await app.get_me()\n        print(me)\n\napp.run(main())\n'})}),"\n",(0,s.jsx)(e.h2,{id:"step-by-step",children:"Step by step"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"Import the Client from swibots, you will import all your classes from this package"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"from swibots import Client\n"})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsx)(e.li,{children:"Initialize the class with your TOKEN"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'app = Client("TOKEN")\n'})}),"\n",(0,s.jsxs)(e.ol,{start:"3",children:["\n",(0,s.jsxs)(e.li,{children:["Async methods must be invoked within an async context. Here we define an async function and put our code inside. Also notice the ",(0,s.jsx)(e.code,{children:"await"})," keyword in front of the method call; this is required for all asynchronous methods."]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"async def main():\n    me = await app.get_me()\n    print(me)\n\napp.run(main())\n"})}),"\n",(0,s.jsxs)(e.ol,{start:"4",children:["\n",(0,s.jsx)(e.li,{children:"Finally, we tell Python to schedule our main() async function by using Client run() method."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:"app.run(main())\n"})}),"\n",(0,s.jsx)(e.h2,{id:"context-manager",children:"Context Manager"}),"\n",(0,s.jsxs)(e.p,{children:["The async with statement starts a context manager, which is used as a shortcut for starting, executing and stopping the App, asynchronously. It does so by automatically calling ",(0,s.jsx)(e.code,{children:"start()"})," and ",(0,s.jsx)(e.code,{children:"stop()"})," in a more convenient way which also gracefully stops the app, even in case of unhandled exceptions in your code."]}),"\n",(0,s.jsx)(e.p,{children:"Below there\u2019s the same example as above, but without the use of the context manager:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'from swibots import Client\n\napp = Client("TOKEN")\n\n\nasync def main():\n    await app.start()\n    me = await app.get_me()\n    print(me)\n    await app.stop()\n\n\napp.run(main())\n'})}),"\n",(0,s.jsx)(e.h2,{id:"using-asynciorun",children:"Using asyncio.run()"}),"\n",(0,s.jsx)(e.p,{children:"Alternatively to the run() method, you can use Python\u2019s asyncio.run() to execute the main function, with one little caveat: the App instance (and possibly other asyncio resources you are going to use) must be instantiated inside the main function."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom swibots import Client\n\nasync def main():\n    app = Client("TOKEN")\n    async with app:\n        me = await app.get_me()\n        print(me)\n\nasyncio.run(main())\n'})})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>c,a:()=>o});var s=t(7294);const i={},a=s.createContext(i);function o(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);