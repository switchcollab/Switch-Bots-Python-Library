"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4096],{5680:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"examples/travel-planner-bot","title":"Travel Planner Bot Example","description":"This example demonstrates a comprehensive real-world use case of a mini app using SwiBots. The bot creates a travel planning application where users can explore destinations, check weather forecasts, convert currencies, and manage their travel itineraries.","source":"@site/docs/examples/travel-planner-bot.md","sourceDirName":"examples","slug":"/examples/travel-planner-bot","permalink":"/Switch-Bots-Python-Library/docs/examples/travel-planner-bot","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Task Management Bot Example","permalink":"/Switch-Bots-Python-Library/docs/examples/task-management-bot"},"next":{"title":"Weather Bot Example","permalink":"/Switch-Bots-Python-Library/docs/examples/weather-bot"}}');var r=t(4848),i=t(8453);const o={},s="Travel Planner Bot Example",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"The Code",id:"the-code",level:2},{value:"Features Demonstrated",id:"features-demonstrated",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"travel-planner-bot-example",children:"Travel Planner Bot Example"})}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates a comprehensive real-world use case of a mini app using SwiBots. The bot creates a travel planning application where users can explore destinations, check weather forecasts, convert currencies, and manage their travel itineraries."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before you begin, make sure you have:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Installed SwiBots (",(0,r.jsx)(n.code,{children:"pip install swibots"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Obtained a bot token from the Switch platform"}),"\n",(0,r.jsx)(n.li,{children:"Signed up for free API keys from OpenWeatherMap and ExchangeRate-API (for demonstration purposes)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"the-code",children:"The Code"}),"\n",(0,r.jsx)(n.p,{children:"Here's the complete code for our travel planner bot:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import logging\nimport aiohttp\nfrom datetime import datetime, timedelta\nfrom swibots import (\n    Client, BotContext, CommandEvent, CallbackQueryEvent, BotCommand,\n    AppPage, Text, Button, ButtonGroup, Image, Grid, GridItem,\n    ScreenType, TextSize, InlineKeyboardButton, InlineMarkup,\n    Carousel, VideoPlayer, SearchBar, Dropdown, ListItem, EmbeddedMedia\n)\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nTOKEN = "YOUR_BOT_TOKEN_HERE"\nWEATHER_API_KEY = "YOUR_OPENWEATHERMAP_API_KEY"\nEXCHANGE_API_KEY = "YOUR_EXCHANGERATE_API_KEY"\n\napp = Client(TOKEN, is_app=True, home_callback="main_menu")\napp.set_bot_commands([BotCommand("start", "Open the travel planner", True)])\n\n# Simulated destination data\ndestinations = {\n    "paris": {\n        "name": "Paris",\n        "country": "France",\n        "description": "The City of Light",\n        "image": "https://example.com/paris.jpg",\n        "video": "https://example.com/paris_promo.mp4"\n    },\n    "tokyo": {\n        "name": "Tokyo",\n        "country": "Japan",\n        "description": "A blend of the ultramodern and the traditional",\n        "image": "https://example.com/tokyo.jpg",\n        "video": "https://example.com/tokyo_promo.mp4"\n    },\n    "new_york": {\n        "name": "New York City",\n        "country": "USA",\n        "description": "The Big Apple",\n        "image": "https://example.com/nyc.jpg",\n        "video": "https://example.com/nyc_promo.mp4"\n    }\n}\n\n# User itineraries\nuser_itineraries = {}\n\n@app.on_command("start")\nasync def start_command(ctx: BotContext[CommandEvent]):\n    await ctx.event.message.reply_text(\n        "Welcome to the Travel Planner! Let\'s start planning your next adventure.",\n        inline_markup=InlineMarkup([[\n            InlineKeyboardButton("Open Travel Planner", callback_data="main_menu", app=True)\n        ]])\n    )\n\n@app.on_callback_query(regexp("main_menu"))\nasync def main_menu(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Travel Planner", size=TextSize.LARGE),\n            ButtonGroup([\n                Button("Explore Destinations", callback_data="explore_destinations"),\n                Button("Weather Forecast", callback_data="weather_forecast"),\n                Button("Currency Converter", callback_data="currency_converter"),\n                Button("My Itinerary", callback_data="view_itinerary"),\n            ]),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("explore_destinations"))\nasync def explore_destinations(ctx: BotContext[CallbackQueryEvent]):\n    destination_items = [\n        GridItem(\n            f"{dest[\'name\']}, {dest[\'country\']}",\n            dest[\'image\'],\n            callback_data=f"destination_{key}"\n        ) for key, dest in destinations.items()\n    ]\n    \n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Explore Destinations", size=TextSize.LARGE),\n            Grid(title="Popular Destinations", options=destination_items),\n            Button("Back to Main Menu", callback_data="main_menu"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("destination_"))\nasync def show_destination(ctx: BotContext[CallbackQueryEvent]):\n    dest_key = ctx.event.callback_data.split("_")[1]\n    dest = destinations[dest_key]\n    \n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text(f"{dest[\'name\']}, {dest[\'country\']}", size=TextSize.LARGE),\n            Image(dest[\'image\']),\n            Text(dest[\'description\'], size=TextSize.MEDIUM),\n            VideoPlayer(dest[\'video\'], title=f"Discover {dest[\'name\']}"),\n            ButtonGroup([\n                Button("Add to Itinerary", callback_data=f"add_to_itinerary_{dest_key}"),\n                Button("Back to Destinations", callback_data="explore_destinations"),\n            ]),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("weather_forecast"))\nasync def weather_forecast(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Weather Forecast", size=TextSize.LARGE),\n            Text("Enter a city name:"),\n            SearchBar(callback_data="get_weather"),\n            Button("Back to Main Menu", callback_data="main_menu"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("get_weather"))\nasync def get_weather(ctx: BotContext[CallbackQueryEvent]):\n    city = ctx.event.details.get("searchQuery", "").strip()\n    if not city:\n        await ctx.event.answer("Please enter a city name.", show_alert=True)\n        return\n    \n    async with aiohttp.ClientSession() as session:\n        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API_KEY}&units=metric"\n        async with session.get(url) as response:\n            data = await response.json()\n    \n    if data["cod"] != "200":\n        await ctx.event.answer(f"Error: {data[\'message\']}", show_alert=True)\n        return\n    \n    forecast = data["list"][:5]  # Get forecast for the next 5 time slots\n    forecast_items = [\n        ListItem(\n            f"{datetime.fromtimestamp(item[\'dt\']).strftime(\'%Y-%m-%d %H:%M\')}: "\n            f"{item[\'main\'][\'temp\']}\xb0C, {item[\'weather\'][0][\'description\']}",\n            callback_data=f"weather_details_{item[\'dt\']}"\n        ) for item in forecast\n    ]\n    \n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text(f"Weather Forecast for {city}", size=TextSize.LARGE),\n            Dropdown("Select a time for details", options=forecast_items),\n            Button("Back to Weather Search", callback_data="weather_forecast"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("currency_converter"))\nasync def currency_converter(ctx: BotContext[CallbackQueryEvent]):\n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Currency Converter", size=TextSize.LARGE),\n            Text("Enter amount and currency codes (e.g., 100 USD to EUR):"),\n            SearchBar(callback_data="convert_currency"),\n            Button("Back to Main Menu", callback_data="main_menu"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("convert_currency"))\nasync def convert_currency(ctx: BotContext[CallbackQueryEvent]):\n    query = ctx.event.details.get("searchQuery", "").strip().upper()\n    try:\n        amount, from_currency, _, to_currency = query.split()\n        amount = float(amount)\n    except ValueError:\n        await ctx.event.answer("Invalid input. Please use format: 100 USD to EUR", show_alert=True)\n        return\n    \n    async with aiohttp.ClientSession() as session:\n        url = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/{from_currency}"\n        async with session.get(url) as response:\n            data = await response.json()\n    \n    if data["result"] != "success":\n        await ctx.event.answer(f"Error: {data[\'error-type\']}", show_alert=True)\n        return\n    \n    rate = data["conversion_rates"].get(to_currency)\n    if not rate:\n        await ctx.event.answer(f"Error: Could not find conversion rate for {to_currency}", show_alert=True)\n        return\n    \n    converted_amount = amount * rate\n    result = f"{amount} {from_currency} = {converted_amount:.2f} {to_currency}"\n    \n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Currency Conversion Result", size=TextSize.LARGE),\n            Text(result, size=TextSize.MEDIUM),\n            Button("Convert Another Amount", callback_data="currency_converter"),\n            Button("Back to Main Menu", callback_data="main_menu"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\n@app.on_callback_query(regexp("add_to_itinerary_"))\nasync def add_to_itinerary(ctx: BotContext[CallbackQueryEvent]):\n    dest_key = ctx.event.callback_data.split("_")[-1]\n    user_id = ctx.event.action_by_id\n    \n    if user_id not in user_itineraries:\n        user_itineraries[user_id] = []\n    \n    user_itineraries[user_id].append(destinations[dest_key])\n    await ctx.event.answer(f"{destinations[dest_key][\'name\']} added to your itinerary!", show_alert=True)\n\n@app.on_callback_query(regexp("view_itinerary"))\nasync def view_itinerary(ctx: BotContext[CallbackQueryEvent]):\n    user_id = ctx.event.action_by_id\n    itinerary = user_itineraries.get(user_id, [])\n    \n    if not itinerary:\n        await ctx.event.answer("Your itinerary is empty. Start by adding some destinations!", show_alert=True)\n        return\n    \n    itinerary_items = [\n        EmbeddedMedia(\n            thumbnail=dest[\'image\'],\n            title=f"{dest[\'name\']}, {dest[\'country\']}",\n            description=dest[\'description\'],\n        ) for dest in itinerary\n    ]\n    \n    page = AppPage(\n        screen=ScreenType.SCREEN,\n        components=[\n            Text("Your Travel Itinerary", size=TextSize.LARGE),\n            Carousel(itinerary_items),\n            Button("Back to Main Menu", callback_data="main_menu"),\n        ]\n    )\n    await ctx.event.answer(callback=page)\n\nif __name__ == "__main__":\n    app.run()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"features-demonstrated",children:"Features Demonstrated"}),"\n",(0,r.jsx)(n.p,{children:"This example showcases the following SwiBots features:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Creating a complex mini app with multiple interconnected features"}),"\n",(0,r.jsxs)(n.li,{children:["Using a wide variety of UI components:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Text"}),"\n",(0,r.jsx)(n.li,{children:"Buttons and ButtonGroups"}),"\n",(0,r.jsx)(n.li,{children:"Grid and GridItems"}),"\n",(0,r.jsx)(n.li,{children:"Image"}),"\n",(0,r.jsx)(n.li,{children:"VideoPlayer"}),"\n",(0,r.jsx)(n.li,{children:"SearchBar"}),"\n",(0,r.jsx)(n.li,{children:"Dropdown"}),"\n",(0,r.jsx)(n.li,{children:"ListItem"}),"\n",(0,r.jsx)(n.li,{children:"EmbeddedMedia"}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(6540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);