"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5998],{1535:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"api_reference/methods/download_media","title":"download_media","description":"Download a media file from a message.","source":"@site/docs/api_reference/methods/download_media.md","sourceDirName":"api_reference/methods","slug":"/api_reference/methods/download_media","permalink":"/Switch-Bots-Python-Library/docs/api_reference/methods/download_media","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"delete_sticker_pack","permalink":"/Switch-Bots-Python-Library/docs/api_reference/methods/delete_sticker_pack"},"next":{"title":"edit_media","permalink":"/Switch-Bots-Python-Library/docs/api_reference/methods/edit_media"}}');var s=o(4848),r=o(8453);const d={},t="download_media",l={},i=[{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"download_media",children:"download_media"})}),"\n",(0,s.jsx)(n.p,{children:"Download a media file from a message."}),"\n",(0,s.jsx)(n.h2,{id:"signature",children:"Signature"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"async def download_media(\n  message: Message,\n  file_name: str = DOWNLOAD_MEDIA,\n  in_memory: bool = False,\n  block: bool = True,\n  progress: DownloadProgressCallback = None,\n  progress_args: tuple = ()\n) -> Optional[Union[BinaryIO, bytes]]:\n"})}),"\n",(0,s.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"message"})," (",(0,s.jsx)(n.a,{href:"../types/message",children:"Message"}),"): The message to download the media\nfrom"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file_name"})," (str): The file name to save the media to. If ",(0,s.jsx)(n.code,{children:"in_memory"})," is\n",(0,s.jsx)(n.code,{children:"True"}),", this parameter is ignored."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"in_memory"})," (bool): Whether to download the media to memory or to a file.\nDefaults to ",(0,s.jsx)(n.code,{children:"False"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"block"})," (bool): Whether to block the current thread until the download is\ncomplete. Defaults to ",(0,s.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"progress"}),"\n(",(0,s.jsx)(n.a,{href:"/Switch-Bots-Python-Library/docs/api_reference/functions#downloadprogresscallback",children:"DownloadProgressCallback"}),"): A\ncallback function that is called when the download progress changes. Defaults\nto ",(0,s.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"progress_args"})," (tuple): Additional arguments to pass to the ",(0,s.jsx)(n.code,{children:"progress"}),"\ncallback function. Defaults to ",(0,s.jsx)(n.code,{children:"()"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from swibots import (\n    Client,\n    Message,\n    DownloadProgress,\n)\n\nTOKEN = "YOUR_TOKEN_HERE"\n\napp = Client(\n    TOKEN,\n    "A cool bot with annotations and everything you could possibly want :)"\n)\n\n\n@app.on_message()\nasync def on_message(message: Message):\n    # Download the media to a file\n    await message.download_media("my_media.jpg")\n\n    # Download the media to memory\n    media = await message.download_media(in_memory=True)\n\n    # Download the media to a file and print the download progress\n    async def progress_callback(progress: DownloadProgress):\n        print(f"Downloaded {progress.downloaded} of {progress.total} bytes")\n\n    await message.download("my_media.jpg", progress=progress_callback)\n\n    # Download the media to memory and print the download progress\n    async def progress_callback(progress: DownloadProgress):\n        print(f"Downloaded {progress.downloaded} of {progress.total} bytes")\n\n    media = await message.download(in_memory=True, progress=progress_callback)\n\n    # Download the media to a file and cancel the download\n    client = await message.download("my_media.jpg", block=False)\n    client.cancel()\n\n    # Download the media to memory and cancel the download\n    client = await message.download(in_memory=True, block=False)\n    client.cancel()\n\n\napp.run()\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>t});var a=o(6540);const s={},r=a.createContext(s);function d(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);