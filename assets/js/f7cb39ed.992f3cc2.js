"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7126],{9306:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>o,frontMatter:()=>i,metadata:()=>h,toc:()=>l});var t=s(4848),r=s(8453);const i={sidebar_position:2},d="Events",h={id:"fundamentals/events",title:"Events",description:"SwiBots is an event-driven framework. This means that the framework is designed to respond to events. Events are the primary way that SwiBots interacts with the outside world. Events are generated by the network, by the user, or by the framework itself. Events are handled by handlers.",source:"@site/docs/fundamentals/events.md",sourceDirName:"fundamentals",slug:"/fundamentals/events",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/events",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Bots",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/bots"},next:{title:"Handlers",permalink:"/Switch-Bots-Python-Library/docs/fundamentals/handlers"}},c={},l=[{value:"Event types",id:"event-types",level:2},{value:"<code>Generic event</code>",id:"generic-event",level:4},{value:"Chat events",id:"chat-events",level:3},{value:"<code>MessageEvent</code>",id:"messageevent",level:4},{value:"<code>ComandEvent</code>",id:"comandevent",level:4},{value:"<code>CallbackQueryEvent</code>",id:"callbackqueryevent",level:4},{value:"<code>InlineQueryEvent</code>",id:"inlinequeryevent",level:4},{value:"Community events",id:"community-events",level:3}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,t.jsxs)(n.p,{children:["SwiBots is an event-driven framework. This means that the framework is designed to respond to events. Events are the primary way that SwiBots interacts with the outside world. Events are generated by the network, by the user, or by the framework itself. Events are handled by ",(0,t.jsx)(n.a,{href:"./handlers",children:"handlers"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"event-types",children:"Event types"}),"\n",(0,t.jsx)(n.p,{children:"There are several types of events that can be handled by SwiBots:"}),"\n",(0,t.jsx)(n.h4,{id:"generic-event",children:(0,t.jsx)(n.code,{children:"Generic event"})}),"\n",(0,t.jsxs)(n.p,{children:["All events inherit from the ",(0,t.jsx)(n.code,{children:"Event"})," class. This class contains the following properties:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type:EventType"})," - The type of the event."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"community_id:str"})," - The ID of the community where the event was triggered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"community:Community"}),"- The community where the event was triggered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"channel_id:str"}),"- The ID of the channel where the event was triggered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"channel:Channel"}),"- The channel where the event was triggered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"group_id:str"})," - The ID of the group where the event was triggered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"group:Group"})," - The group where the event was triggered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"action_by_id:str"})," - The ID of the user that triggered the event."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"action_by:User"})," - The user that triggered the event."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"chat-events",children:"Chat events"}),"\n",(0,t.jsx)(n.h4,{id:"messageevent",children:(0,t.jsx)(n.code,{children:"MessageEvent"})}),"\n",(0,t.jsx)(n.p,{children:"A message was sent to a chat."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Additional properties:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message:Message"})," - The message that was sent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message_id:str"})," - The ID of the message that was sent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id:str"})," - The ID of the user that sent the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user:User"})," - The user that sent the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"receiver_id:str"})," - The ID of the user that received the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"receiver:User"})," - The user that received the message."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"comandevent",children:(0,t.jsx)(n.code,{children:"ComandEvent"})}),"\n",(0,t.jsx)(n.p,{children:"A command was sent to a chat."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Additional properties:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"command:str"})," - The command name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"args:str"})," - The arguments (the message text without the command name and the '/')."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message:Message"})," - The message that was sent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message_id:str"})," - The ID of the message that was sent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id:str"})," - The ID of the user that sent the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user:User"})," - The user that sent the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"receiver_id:str"})," - The ID of the user that received the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"receiver:User"})," - The user that received the message."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"callbackqueryevent",children:(0,t.jsx)(n.code,{children:"CallbackQueryEvent"})}),"\n",(0,t.jsx)(n.p,{children:"A query callback was sent (user pressed a button, for example)."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callback_data:str"})," - The callback data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"command:str"})," - The command name."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"args:str"})," - The arguments (the message text without the command name and the '/')."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message:Message"})," - The message that was sent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"message_id:str"})," - The ID of the message that was sent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user_id:str"})," - The ID of the user that sent the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"user:User"})," - The user that sent the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"receiver_id:str"})," - The ID of the user that received the message."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"receiver:User"})," - The user that received the message."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"inlinequeryevent",children:(0,t.jsx)(n.code,{children:"InlineQueryEvent"})}),"\n",(0,t.jsx)(n.p,{children:"An inline query was sent. This event is triggered when a user starts typing '@botname' in a chat."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"query_id:str"})," - The unique identifier of this query."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"query:str"})," - The text of the query."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"offset:str"})," - The offset of the results to be returned, can be controlled by the bot (when you handle this event and set the next_offset value, the value will be returned in this field)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"community-events",children:"Community events"}),"\n",(0,t.jsxs)(n.p,{children:["These events inherit from the ",(0,t.jsx)(n.code,{children:"Event"})," class. ",(0,t.jsx)(n.strong,{children:"And none of them have additional properties."})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CommunityUpdatedEvent"})," - A community was updated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"MemberJoinedEvent"})," - A community was joined by an user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"MemberLeftEvent"})," - A community was left by an user"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ChannelCreatedEvent"})," - A channel was created"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ChannelUpdatedEvent"})," - A channel was updated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ChannelDeletedEvent"})," - A channel was deleted"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GroupCreatedEvent"})," - A group was created"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GroupUpdatedEvent"})," - A group was updated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GroupDeletedEvent"})," - A group was deleted"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"UserBannedEvent"})," - An user was banned"]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>h});var t=s(6540);const r={},i=t.createContext(r);function d(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);